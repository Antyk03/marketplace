import java.util.Locale

// Usare una closure lazy per leggere la proprietà senza rompere la configuration cache
def tomcatDirProp = project.findProperty('tomcatDir') ?: ''

// --- Controllo proprietà Tomcat ---
tasks.register("checkTomcatProperties") {
    group = "Tomcat"
    description = "Controlla che le proprietà necessarie siano impostate"

    doFirst {
        def errori = ""
        if (tomcatDirProp.toString().isBlank()) {
            errori += "tomcatDir "
        }

        if (!errori.isBlank()) {
            throw new GradleException("""
            ################################################################
            #                      ERRORE                                  #
            ################################################################
            Impostare le seguenti proprieta' nel file gradle.properties: $errori
            """)
        }
    }

    doLast {
        println("Tutte le proprietà necessarie sono impostate correttamente.")
    }
}

// --- Rilevamento OS ---
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)

// --- Start Tomcat ---
tasks.register("startTomcat", Exec) {
    group = "Tomcat"
    description = "Avvia il server applicativo locale."
    dependsOn "checkTomcatProperties"

    workingDir = file("${tomcatDirProp}/bin")

    doFirst {
        if (osName.contains('windows')) {
            commandLine 'cmd', '/c', 'catalina.bat', 'run'
        } else if (osName.contains('mac') || osName.contains('linux')) {
            commandLine './catalina.sh', 'run'
        } else {
            throw new GradleException('Sistema operativo non supportato...')
        }
    }
}

// --- Stop Tomcat ---
tasks.register("stopTomcat", Exec) {
    group = "Tomcat"
    description = "Ferma il server applicativo"
    dependsOn "checkTomcatProperties"

    workingDir = file("${tomcatDirProp}/bin")

    doFirst {
        if (osName.contains('windows')) {
            commandLine 'cmd', '/c', 'catalina.bat', 'stop'
        } else if (osName.contains('mac') || osName.contains('linux')) {
            commandLine './catalina.sh', 'stop'
        } else {
            throw new GradleException('Sistema operativo non supportato...')
        }
    }

    doLast {
        println("Tomcat è stato fermato.")
    }
}

// --- Deploy WAR ---
tasks.register("deploy", Copy) {
    group = "Tomcat"
    description = "Genera e installa il war nella cartella webapp di Tomcat"
    dependsOn "checkTomcatProperties", "war"

    from tasks.named("war").get().archiveFile
    into "${tomcatDirProp}/webapps"
}

// --- Undeploy WAR ---
tasks.register("undeploy", Delete) {
    group = "Tomcat"
    description = "Elimina il file war nella cartella webapp di Tomcat"
    dependsOn "checkTomcatProperties", "war"

    delete "${tomcatDirProp}/webapps/${tasks.named("war").get().archiveFileName.get()}"
}

// --- Configurazione WAR ---
tasks.named("war") {
    archiveFileName.set("${project.name}.war")
}
